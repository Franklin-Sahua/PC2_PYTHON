# -*- coding: utf-8 -*-
"""PC2- PYTHON-SAHUA FRANKLIN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1o1vvYtbr8H1FaZaDcb2RB6YlnK_Pu6

#**Estructuras Iterativas**:

##Problema 1:
Escribe un programa en Python para encontrar los números que son divisibles por 7 y múltiplos de 5,
en el rango de 1500 y 2700 (ambos incluidos).
"""

numeros_divisibles = []
for numero in range(1500, 2701):
    if numero % 7 == 0 and numero % 5 == 0:
      numeros_divisibles.append(numero)

print(numeros_divisibles)

"""##Problema 2:
Escriba un programa en Python para construir el siguiente patrón.
"""

# Programa para imprimir el patrón
for i in range(1, 6):
    print('* ' * i)

for i in range(3, 0, -1):
    print('* ' * i)

"""##Problema 3:
Por medio de un bucle While genere un código que permita el ingreso de números por teclado. El
ingreso de los números debe ser permitido hasta que el usuario decida ya no ingresar nuevos
números.
Con dichos números, su programa debe evaluar cada uno de estos números e indicar la cantidad de
números pares e impares.
"""

# Inicialización de variables
numeros = []
pares = 0
impares = 0

# Bucle principal
while True:
    # Preguntar si desea ingresar un número
    respuesta = input("¿Desea ingresar un número? (SI/NO): ").upper()

    if respuesta == "NO":
        break
    elif respuesta != "SI":
        print("Por favor, responda SI o NO")
        continue

    # Ingresar el número
    try:
        numero = int(input("Ingrese el número: "))
        numeros.append(numero)

        # Contar pares e impares
        if numero % 2 == 0:
            pares += 1
        else:
            impares += 1
    except ValueError:
        print("Por favor, ingrese un número válido") ##plus en caso se agreguen datos incorrectos al bucle

# Mostrar resultados
print("\nNúmeros ingresados:", numeros)
print("Cantidad de números pares:", pares)
print("Cantidad de números impares:", impares)

"""##Problema 4:
Imaginemos que lo han contratado para un colegio donde se desea realizar un sistema por el cual se
pueda generar un listado de “n” alumnos y 3 calificaciones que corresponden a alguna de sus
materias.
"""

# Crear una lista para almacenar los datos de los alumnos
alumnos = []

# Cuántos alumnos quiere ingresar
n = int(input("Ingrese la cantidad de alumnos: "))

# Recolectar la información de cada alumno
for i in range(n):
    nombre = input(f"\nIngrese el nombre del alumno {i+1}: ")
    notas = []

    for j in range(3):
        nota = int(input(f"Ingrese la nota {j+1} de {nombre}: "))
        notas.append(nota)

    alumno = {
        "Alumno": nombre,
        "Notas": notas
    }

    alumnos.append(alumno)

# Mostrar el listado completo
print("\nListado completo de alumnos:")
for alumno in alumnos:
    print(alumno)

"""#**Funciones**

##Problema 5:
Genere una función que tenga como parámetros el ingreso de un número entero y un dígito.
Verifique la cantidad de veces que se usa dicho número en el dígito solicitado.
"""

def contar_digito(numero, digito):

    # Convertir ambos a string y usar count()
    return str(abs(numero)).count(str(digito))

n = int(input("Ingrese un número entero: "))
d = int(input("Ingrese el dígito a buscar (0-9): "))

if 0 <= d <= 9:
    veces = contar_digito(n, d)
    print(f"El dígito {d} aparece {veces} veces en el número {n}.")
else:
    print("Error: Debe ingresar un solo dígito entre 0 y 9.")

"""##Problema 6:
Escriba un programa en Python para obtener la serie de Fibonacci entre 0 y 50.
Nota: La secuencia de Fibonacci es la serie de números:
0, 1, 1, 2, 3, 5, 8, 13, 21,. ...
"""

# Serie de Fibonacci entre 0 y 50

a, b = 0, 1

print("Serie de Fibonacci entre 0 y 50:")

while a <= 50: #ingresar el numero que termina el intervalo de 0 a n
    print(a, end=", ")
    a, b = b, a + b

"""##Problema 7:
Escriba una función de Python que tome un número como parámetro y verifique que el número sea
primo o no.
"""

def es_primo(numero):
    if numero <= 1:
        return False
    for i in range(2, numero):
        if numero % i == 0:
            return False
    return True


num = int(input("Ingrese un número: "))

if es_primo(num):
    print(f"{num} es un número primo.")
else:
    print(f"{num} no es un número primo.")


# Ejemplo de uso:
num = int(input("Ingrese un número para verificar si es primo: "))

if es_primo(num):
  print(f"{num} es un número primo.")
else:
  print(f"{num} no es un número primo.")

"""##Problema 8:
Escribe una función de Python para calcular el factorial de un número (un entero no negativo). La
función acepta el número como argumento.
"""

def factorial(n):
    if n < 0:
        return "El número debe ser no negativo."

    resultado = 1
    for i in range(1, n + 1):
        resultado *= i
    return resultado

numero = int(input("Ingrese un número entero: "))
print(f"El factorial de {numero} es: {factorial(numero)}")

"""#**Métodos de Cadenas**

##Problema 9:
Al enviar mensajes de texto o twittear, no es raro acortar las palabras para ahorrar tiempo o espacio,
por ejemplo, omitiendo las vocales.
Implemente un programa que solicite al usuario una cadena de texto y luego retorne ese mismo
texto pero con todas las vocales (A, E, I, O y U) omitidas, ya sea que se ingresen en mayúsculas o
minúsculas.
"""

# Problema 9: Omitir vocales en una cadena de texto

texto_original = input("Ingrese una cadena de texto: ")
texto_sin_vocales = ""
vocales = "aeiouAEIOU"

for caracter in texto_original:
    if caracter not in vocales:
        texto_sin_vocales += caracter

print("Texto sin vocales:", texto_sin_vocales)

"""##Problema 10:
En los Estados Unidos, las fechas suelen tener el siguiente formato: mes-día-año (MM/DD/AAAA). Las
fechas en ese formato no se pueden ordenar fácilmente porque el año de la fecha es el último en
lugar del primero. Intente ordenar, por ejemplo, 2/2/1800, 3/3/1900 y 1/1/2000 cronológicamente
en cualquier programa (por ejemplo, una hoja de cálculo). Las fechas en ese formato también son
ambiguas. ¡Una fecha como el 8 de septiembre de 1636, podría interpretarse como el 9 de agosto de
1636!  
Implementar un programa que pida al usuario una fecha, en orden mes-día-año, con formato como
8/9/1636 o Septiembre 8, 1636, donde el mes en este último podría ser cualquiera de los valores en
la lista abajo:
"""

def convertir_fecha(fecha):
    meses = {
        "Enero": "01",
        "Febrero": "02",
        "Marzo": "03",
        "Abril": "04",
        "Mayo": "05",
        "Junio": "06",
        "Julio": "07",
        "Agosto": "08",
        "Septiembre": "09",
        "Octubre": "10",
        "Noviembre": "11",
        "Diciembre": "12"
    }

    # Eliminar espacios extra
    fecha = fecha.strip()

    try:
        # Caso formato MM/DD/AAAA
        if "/" in fecha:
            mes, dia, año = fecha.split("/")
            mes = mes.zfill(2)
            dia = dia.zfill(2)
            return f"{año}-{mes}-{dia}"

        # Caso formato 'Mes DD, AAAA'
        else:
            partes = fecha.replace(",", "").split()
            mes_nombre = partes[0].capitalize()
            dia = partes[1].zfill(2)
            año = partes[2]

            if mes_nombre in meses:
                mes = meses[mes_nombre]
                return f"{año}-{mes}-{dia}"
            else:
                return "Mes no válido."

    except Exception as e:
        return f"Error en el formato de la fecha: {e}"

# Ejemplos de uso
print(convertir_fecha("9/8/1636"))
print(convertir_fecha("Septiembre 8, 1636"))
print(convertir_fecha("1/1/1970"))

"""#**EJERCICIOS ADICIONALES**

##1.
Realizar una función que permita la carga de n alumnos. Por cada alumno se deberá preguntar el nombre completo y permitir el ingreso de 3 notas. Las notas deben estar comprendidas entre 0 y 10. Devolver el listado de alumnos.
"""

# Crear una lista para almacenar los datos de los alumnos
alumnos = []

# Cuántos alumnos quiere ingresar
n = int(input("Ingrese la cantidad de alumnos: "))

# Recolectar la información de cada alumno
for i in range(n):
    nombre = input(f"\nIngrese el nombre del alumno {i+1}: ")
    notas = []

    for j in range(3):
        nota = int(input(f"Ingrese la nota {j+1} de {nombre}: "))
        notas.append(nota)

    alumno = {
        "Alumno": nombre,
        "Notas": notas
    }

    alumnos.append(alumno)

# Mostrar el listado completo
print("\nListado completo de alumnos:")
for alumno in alumnos:
    print(alumno)

"""##2.
Definir una función que dado un listado de alumnos evalúe cuántos aprobaron y cuántos desaprobaron, teniendo en cuenta que se aprueba con 4. La nota será el promedio de las 3 notas para cada alumno.
"""

# Problema 2: Evaluar aprobados y desaprobados

def evaluar_aprobados_desaprobados(lista_alumnos):
    aprobados = 0
    desaprobados = 0
    resultados = []

    for alumno in lista_alumnos:
        nombre = alumno["Alumno"]
        notas = alumno["Notas"]
        promedio = sum(notas) / len(notas)

        estado = "Aprobado" if promedio >= 4 else "Desaprobado"
        resultados.append({"Alumno": nombre, "Promedio": promedio, "Estado": estado})

        if promedio >= 4:
            aprobados += 1
        else:
            desaprobados += 1

    print(f"\nCantidad de alumnos aprobados: {aprobados}")
    print(f"Cantidad de alumnos desaprobados: {desaprobados}")
    return resultados

# Usar la función con la lista de alumnos del Problema 1
resultados_evaluacion = evaluar_aprobados_desaprobados(alumnos)

"""##3.
Informar el promedio de nota del curso total
"""

# Problema 3: Promedio de nota del curso total

def promedio_curso_total(lista_alumnos):
    total_notas = 0
    total_alumnos = len(lista_alumnos)

    if total_alumnos == 0:
        return

    for alumno in lista_alumnos:
        total_notas += sum(alumno["Notas"])

    promedio_total = total_notas / (total_alumnos * 3) # 3 notas por alumno
    return promedio_total

# Usar la función con la lista de alumnos del Problema 1
promedio_general = promedio_curso_total(alumnos)
print(f"\nEl promedio total de nota del curso es: {promedio_general:.2f}")

"""##4.
Realizar una función que indique quién tuvo el promedio más alto y quién tuvo la nota promedio más baja.
"""

# Problema 4: Alumno con el promedio más alto y más bajo

def promedio_mas_alto_y_bajo(lista_alumnos):
    if not lista_alumnos:
        return None, None # No hay alumnos en la lista

    mejor_alumno = None
    peor_alumno = None
    promedio_alto =
    promedio_bajo =

    for alumno in lista_alumnos:
        nombre = alumno["Alumno"]
        notas = alumno["Notas"]
        promedio = sum(notas) / len(notas)

        if promedio > promedio_alto:
            promedio_alto = promedio
            mejor_alumno = nombre

        if promedio < promedio_bajo:
            promedio_bajo = promedio
            peor_alumno = nombre

    print(f"\nAlumno con el promedio más alto: {mejor_alumno} (Promedio: {promedio_alto:.2f})")
    print(f"Alumno con el promedio más bajo: {peor_alumno} (Promedio: {promedio_bajo:.2f})")
    return mejor_alumno, promedio_alto, peor_alumno, promedio_bajo

# Usar la función con la lista de alumnos del Problema 1
mejor, prom_alto, peor, prom_bajo = promedio_mas_alto_y_bajo(alumnos)

"""##5.
Realizar una función que permita buscar un alumno por nombre, siendo el nombre completo o parcial, y devuelva una lista con los n alumnos que concuerden con ese nombre junto con todos sus datos, incluido el promedio de sus notas.
"""

# Problema 5: Buscar alumno por nombre

def buscar_alumno_por_nombre(lista_alumnos, nombre_buscado):
    alumnos_encontrados = []
    nombre_buscado = nombre_buscado.lower() # Convertir a minúsculas para búsqueda insensible a mayúsculas

    for alumno in lista_alumnos:
        nombre_alumno = alumno["Alumno"].lower()
        if nombre_buscado in nombre_alumno:
            notas = alumno["Notas"]
            promedio = sum(notas) / len(notas)
            alumnos_encontrados.append({
                "Alumno": alumno["Alumno"],
                "Notas": notas,
                "Promedio": promedio
            })

    return alumnos_encontrados

# Ejemplo de uso:
nombre_a_buscar = input("\nIngrese el nombre (completo o parcial) del alumno a buscar: ")
alumnos_coincidentes = buscar_alumno_por_nombre(alumnos, nombre_a_buscar)

if alumnos_coincidentes:
    print(f"\nAlumnos encontrados que coinciden con '{nombre_a_buscar}':")
    for alumno_encontrado in alumnos_coincidentes:
        print(f"  - Nombre: {alumno_encontrado['Alumno']}, Notas: {alumno_encontrado['Notas']}, Promedio: {alumno_encontrado['Promedio']:.2f}")
else:
    print(f"\nNo se encontraron alumnos que coincidan con '{nombre_a_buscar}'.")